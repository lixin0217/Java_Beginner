第14章 关于类的专题研究

Java中有一个比较特殊的类，就是Object类，它是所有类的父类，其功能非常强大。本章介绍Object类的概念、匿名内部类、匿名对象、类的使用方法、数据类型的传递、接口对象以及关键字的使用等知识和技能。

14.1 众类鼻祖──Object类
Object类是Java一个比较特殊的类，它是类层次结构的根，位于继承树的顶层，即Java中所有的类从根本上都继承自Object类。它是Java中唯一没有父类的类。如果一个类没有使用extends关键字明确标识继承另外一个类，那么这个类就默认继承Object类，因此，Object类是Java类层中的最高层类，是所有类的超类。换句话说，Java中任何一个类都是它的子类。由于所有的类都是由Object类衍生出来的，所以Ojectc类中的方法适用于所有类。

14.1.1 取得对象信息：toString()
Object类的toString()方法是在打印对象时被调用，将对象信息变为字符串返回。默认的toString()方法有一个特点：为了适用于所有的子类，toString()在默认情况下输出对象地址，当然，每一个子类也可以自己进行修改。

【范例14-1】 Object类的使用（ObjectDemo01.java）。
【范例14-2】 覆写Object类的方法（OverrideObject.java）。

14.1.2 对象相等判断方法：equals()
在Object类中还有一个比较重要的方法：equals()，此方法用于比较对象是否相等，而且此方法必须被覆写。

【范例14-3】 没有覆写Object类中的equals方法（ObjectDemo03.java）。
【范例14-4】 equals方法的覆写（ObjectDemo04.java）。

14.1.3 对象签名hashcode()
Object类有两种方法来推断对象的标识：equals()和hashCode()。如果根据equals() 方法判断两个对象是相等的，那么对这两个对象中的每个对象调用hashCode()方法都必须生成相同的整数结果。但是反过来，如果两个hashCode()返回的结果相等，两个对象的equals()方法却不一定相等。在默认情况下equals()方法用来比较两个对象的地址值，而原始的hashCode()方法用来返回其所在对象的物理地址。

【范例14-5】 比较两个对象的hashCode（ObjectHashCode.java）。

14.1.4 使用Object接收任意引用数据类型对象
由于Object类是所有类的父类，所有类的对象都可以使用Object接收，Object类不光可以接收对象，还可以接收任意的引用数据类型（类、接口、数组）。

【范例14-6】 使用Object接收数组（ObjectArray05.java）。
【范例14-7】 使用Object接收接口对象（ObjectInterface06.java）。

14.2 内部类
所谓的内部类就是指在一个类的内部又定义了其他类的情况。如果在类Outer的内部再定义一个类Inner，此时类Inner就称为内部类，而类Outer则称为外部类。内部类可声明为public或private。当内部类声明为public或private时，对其访问的限制与成员变量和成员方法完全相同。

14.2.1 内部类的基本定义
内部类主要有如下作用。⑴ 内部类提供了更好的封装，可以把内部类隐藏在外部类之内，不允许同一个包中的其他类访问该类。⑵ 内部类成员可以直接访问外部类的私有数据，因为内部类被当成其外部类成员，同一个类的成员之间可以相互访问。但外部类不能访问内部类的实现细节，例如内部类的成员变量。⑶ 匿名内部类适合用于创建那些仅需要一次的类。

【范例14-8】 内部类的使用（ObjectInnerDemo.java）。

14.2.2 使用static定义的内部类就是外部类
如果使用static来修饰一个内部类，则这个内部类就属于外部类本身，而不属于外部类的某个对象。因此使用static修饰的内部类被称为类内部类，有的地方也称为静态内部类。
【范例14-9】 用static声明的内部类访问非static的外部类属性（ObjectStaticDemo. java）。

14.2.3 在方法中定义内部类
内部类不仅可以在类中定义，也可以在方法中定义。
【范例14-10】 在方法中定义内部类（ObjectInnerClass.java）。

14.3 匿名内部类
匿名内部类由于没有名字，所以它的创建方式也比较特别。

在这里我们看到使用匿名内部类我们必须要继承一个父类或者实现一个接口。同时它没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。当然这个引用是隐式的。

【范例14-11】 匿名内部类使用实例（AnonymousInnerClass.java）。
匿名内部类存在一个缺陷，就是它仅能被使用一次，创建匿名内部类时它会立即创建一个该类的实例，该类的定义会立即消失，所以匿名内部类不能够被重复使用。

14.4 匿名对象
匿名对象，顾名思义就是没有明确的声明的对象。读者也可以简单地理解为只使用一次的对象，即没有任何一个具体的对象名称引用它。

【范例14-12】 匿名对象的使用（AnonymousObject.java）。
从程序中可以看到用new Person()声明的对象并没有赋给任何一个Person类对象的引用，所以此对象只使用了一次，之后就会被Java的垃圾收集器回收。

14.5 this关键字的使用
在整个Java的面向对象程序设计中，this是一个比较难理解的关键字。
this表示当前对象，而所谓的当前对象就是指调用类中方法或属性的那个对象。

【范例14-13】 在构造方法中声明与方法同名参数（Person.java）。
【范例14-16】 利用This判断两个对象是否相等（ThisCompareDemo.java）。

如果在程序中想用某一个构造方法调用另一个构造方法，也可以用this来实现。具体的调用形式如下。
this();
【范例14-17】 用this调用构造方法（ThisConstructor.java）。
构造方法是在实例化一个对象时被自动调用的，也就是说在类中的所有方法里，只有构造方法是被优先调用的，所以使用this调用构造方法必须也只能放在类中。

14.6 static关键字的使用
在Java之中，使用static关键字可以定义属性和方法。

14.6.1 使用static定义属性
在程序中如果用static定义属性的话，则此变量称为静态属性。那什么是静态属性？使用静态属性又有什么好处呢？

【范例14-18】 静态属性的声明（StaticDemo.java）。
在Java中提供了static关键字，用它来修饰类的属性后，则此属性就是公共属性了。
【范例14-19】 static关键字的使用（StaticDemo2.java）。
从程序中可以看到，只在第28行修改了city属性，而且只修改了一个对象的city属性，但再次输出时，可以看到全部对象的city值都发生了同样的变化，这说明用static声明的属性是所有对象共享的。

用static方式声明的属性，也可以用类名直接访问。拿上面的程序来说，如果想修改city属性中的内容，可以用如下的方式。所以有些书上也把用static类型声明的变量称之为“类变量” 。

14.6.2 使用static定义方法
static既可以在声明变量时使用，也可以用其来声明方法，用它声明的方法有时也被称为“类方法”。使用static定义的方法可以由类名称直接调用。

【范例14-20】 静态方法的声明（StaticMethod.java）。
在使用static类型声明的方法时需要注意的是，如果在类中声明了一个static类型的属性，则此属性既可以在非static类型的方法中使用，也可以在static类型的方法中使用。若要用static类型的方法调用非static类型的属性，就会出现错误。

14.6.3 Static主方法（main）

由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。
【范例14-21】 向类中传递参数（TestMain.java）。

14.6.4 Static应用──Static代码块及静态导入
一个类可以使用不包含在任何方法体中的静态代码块，当类被载入时，静态代码块被执行，且只执行一次。静态代码块经常用来进行类属性的初始化。

【范例14-22】 静态代码块的使用（TestStaticDemo.java）。

14.7 final关键字的使用
final在Java之中称为终结器，在Java之中final可以作三件事情，定义类、定义方法、定义变量。
⑴ final标记的类不能被继承。
⑵ final标记的方法不能被子类覆写。
⑶ final标记的变量（成员变量或局部变量）即为常量，只能赋值一次。

【范例14-23】 final标记的变量只能赋值一次实例（TestFinalDemo1.java）。
final修饰的变量为终态局部变量，对于终态局部变量，不能进行赋值操作。

【范例14-24】 final标记的方法不能被子类覆写实例（TestFinalDemo2.java）。

14.8 instanceof关键字的使用
可以用instanceof判断一个类是否实现了某个接口，也可以用它来判断一个实例对象是否属于一个类。
它的返回值是布尔型的，或真(true)或假(false)。

【范例14-25】 instanceof关键字使用实例（TestInstance.java）。

14.10 实战练习
1. 定义一个包含“name”、“age”和“sex”的对象，使用匿名对象输出对象实例。
2. 完成一个统计Book类产生实例化对象的个数。
