第8章 常用的数据结构—数组

数组是Java中一种常见的数据结构，分为一维数组、二维数组以及多维数组等几种。只有灵活掌握数组的应用，才能编写出更强大、效率更高的Java程序。

8.1 理解数组
数组（Array），顾名思义就是一组数据。当然这“一组数据”得是有一定关系的数据，否则只会使问题更复杂
在Java中，数组也可以视为一种数据类型。它本身是一种引用类型，引用类型（reference type）引用类型的变量非常类似于C/C++的指针。而指针就是变量在内存中的址。任何变量只要存在于内存中，就需要有个唯一的编号标识这个变量在内存中的位置，而这个唯一的内存编号就是内存地址，它就是所谓的指针（pointer）。找到了内存地址，也就可以找到地址所对应的变量。为了方便操作，给这个32位或64位的地址取一个好记的名称，这个名称在C/C++中，就叫指针变量。而放到Java中，就叫引用类型变量。

Java的数组既可以存储基本类型的数据，也可以存储引用数据类型的数据。

【范例8-1】 一维数组的使用(ArrayDemo8 1.java)。

8.2 一维数组
“定义”：数组是有序数据的集合，数组中的每个元素必须是相同的数据类型，可以用一个统一的数组名和下标来唯一地确定数组中的元素。一维数组可以存放上千万个数据，并且这些数据的类型是完全相同的。

8.2.1 一维数组的声明与内存的分配
要使用Java的数组，必须经过以下两个步骤。⑴ 声明数组。⑵ 分配内存给该数组。
在数组的声明格式里，“数据类型”是声明数组元素的数据类型，常见的类型有整型、浮点型与字符型等。“数组名”是用来统一这组相同数据类型的元素的名称，其命名规则和变量相同，建议读者使用有意义的名称为数组命名。数组声明后，接下来便要配置数组所需的内存，其中“个数”是告诉编译器，所声明的数组要存放多少个元素，而关键字“new”则是命令编译器根据括号里的个数，在内存中分配一块内存供该数组使用。

数组属于非基本数据类型因此数组变量score所保存的并非是数组的实体，而是数组实体的参考地址。
上述的格式会在声明的同时，即分配一块内存空间供该数组使用。

在Java中，由于整数数据类型所占用的空间为4个bytes，而整型数组score可保存的元素有11个，所以例子中占用的内存共有4 * 11 = 44个字节。下图是将数组score用图形来表示，从中可以比较容易理解数组的保存方式。

8.2.2 数组中元素的表示方法
想要使用数组里的元素，可以利用索引来完成。Java的数组索引编号从0开始

【范例8-2】 一维数组的使用（createArrayDemo8 2.java）。

8.2.3 数组元素的赋值
静态初始化在第8.1节里已经介绍过了，只要在数组的声明格式后面再加上初值的赋值即可

【范例8-3】 一维数组的赋值（arrayAssignment8 3.java）。

8.2.4 数组应用范例
从前面的范例可知，数组的索引就好像宾馆里的房间编号一样，想要找到某个房间，就得先找到房间编号！
【范例8-4】 求数组中的最大值和最小值（arrayMaxMin8 4.java）。

8.3 二维数组
8.3.1 二维数组的声明与分配内存
二维数组声明的方式和一维数组类似，内存的分配也一样是用new这个关键字。

如果想直接在声明时就对数组赋初值，可以利用大括号完成。只要在数组的声明格式后面再加上所赋的初值即可
需要特别注意的是，用户不需要定义数组的长度，因此在数组名后面的中括号里不必填入任何的内容。此外，在大括号内还有几组大括号，每组大括号内的初值会依序指定给数组的第0、1、…、n行元素。

1. 每行的元素个数不同的二维数组
2. 取得二维数组的行数与特定行的元素的个数
在二维数组中，若想取得整个数组的行数，或者是某行元素的个数，则可利用“.length”来获取。也就是说，如要取得二维数组的行数，只要用数组名加上“.length”即可；如要取得数组中特定行的元素的个数，则须在数组名后面加上该行的索引值，再加上“.length”

8.3.2 二维数组元素的引用及访问
二维数组元素的输入与输出方式与一维数组相同
【范例8-5】 二维数组的静态赋值（twoDimensionArray8 5.java）。

8.4 多维数组
要想提高数组的维数，只要在声明数组的时候将索引与中括号再加一组即可
【范例8-6】 三维数组的使用方法（threeDimensionArray8 6.java）。

8.5 高手点拨
1. Java中的null的使用
Java中变量通常遵循一个原则：先定义，并初始化后，然后再使用。有时候，我们定义一个类型变量，在刚开始的时候，无法给出一个明确的值，就可以用一个null来代替。参见范例8-2。但是有一点需要注意的是，不可以将null赋给基本类型变量（如int、float、double等）。

2. 数组的下标
在使用数组时，读者需要注意的是，人们的直观感觉计数一般是从1开始的，而Java中数组的下标是从0开始计数的。此外，数组的下标不能超过（length-1），否则会产生越界错误.

8.6 实战练习
1. 编写程序，对int[] a = {25, 24, 12, 76, 98, 101, 90, 28}数组进行排序。排序算法有很多种，读者可先编写程序实现冒泡法排序，运行结果如下图所示。（注：冒泡排序也可能有多种实现版本，本题没有统一的答案。）
2. 编写程序，将上述算法稍加改写，将排序算法改成“乱序算法”。两次运行结果分别如下所示。（提示：所谓"乱序"，是跟"排序"相反，乱序为了增加随机性，乱序在生活中模拟随机出现的事件中有很大的应用价值。编程时，需要使用导入import java.util.Random;）
