第9章 类和对象

类和对象是面向对象编程语言的要概念。Java是一种面向对象的语言，所以要想熟练使用Java语言，就一定要掌握类和对象的使用。本章介绍面向对象基本的概念，面向对象的三个重要特征（封装性、继承性、多态性），以及声明创建类和对象（数组）的方法。

到目前为止，前面介绍的语法都属于编程语言的最基本的功能，其中包括数据类型和程序控制语句等。随着计算机的发展，面向对象的概念产生。类（class）和对象（object）是面向对象程序设计最重要的概念。要深入了解Java程序语言，一定要树立面向对象程序设计的观念。从本章开始学习Java程序中类的设计以及对象的使用。

9.1 理解面向对象程序设计
面向对象程序（Object-oriented programming，OOP）设计是继面向过程又一具有里程碑意义的编程思想，是现实世界模型的自然延伸。下面从结构化程序设计说起，逐步展示面向对象程序设计。

9.1.1 结构化程序设计简介
结构化程序设计。其概念最早由E.W.Dijikstra在1965年提出的，是软件发展的一个重要的里程碑。它的主要观点是采用自顶向下、逐步求精及模块化的程序设计方法，使用三种基本控制结构构造程序，任何程序都可由顺序、选择、循环这三种基本控制结构来构造。

结构化程序设计主要强调的是程序的易读性。在该程序设计思想的指导下，编程基本是通过写不同目的的函数/过程来实现，故又称为“面向过程编程（ProcedureOriented Programming，POP)）。面向过程开发方式是对计算机底层结构的一层抽象，它把程序的内容分为数据和操纵数据的操纵两个部分。这种编程方式的核心问题是数据结构和算法的开发和优化。

结构化程序设计方法可以用一句话概括：程序 = 算法 + 数据结构这里的“算法”可以用顺序、选择、循环这三种基本控制结构来实现。这里的“数据结构”是指数据以及其相应的存取方式。

9.1.2 面向对象程序设计简介
面向对象的思想主要是基于抽象数据类型（Abstract Data Type, ADT） 如果对抽象数据类型进一步抽象，就会发现把这种数据类型的实例当作一个具体的东西、事物、对象，就可以引发人们对编程过程中怎样看待所处理的问题的一次大的改变。

抽象数据类型方法虽然也有一定的抽象能力，但其核心仍然是数据结构和算法。而面向对象方法直接把所有事物都当作独立的对象，处理问题过程中所思考的不再主要是怎样用数据结构来描述问题，而是直接考虑重现问题中各个对象之间的关系。可以说，面向对象革命的最重要价值就在于改变了人们看待和处理问题的方式。

可以将现实世界中的任何实体都看作是对象,现实世界中的对象均有属性和行为，映射到计算机程序上，属性则表示对象的数据，行为表示对象的方法（其作用是处理数据或同外界交互）。现实世界中的任何实体都可归属于某类事物，任何对象都是某一类事物的实例。所以在面向对象的程序设计中一个类可以实例化多个相同类型的对象。面向对象编程达到了软件工程的三个主要目标：重用性、灵活性和扩展性。

9.1.3 面向对象程序设计的基本特征
面向对象的程序设计的3个主要特征：封装性、继承性、多态性。
封装性（encapsulation）：封装是一种信息隐蔽技术，它体现于类的说明，是对象的重要特性。封装使数据和加工该数据的方法（函数）封装为一个整体，以实现独立性很强的模块，使得用户只能见到对象的外特性（对象能接受哪些消息，具有哪些处理能力），而对象的内特性（保存内部状态的私有数据和实现加工能力的算法）对用户是隐蔽的。封装的目的在于把对象的设计者和对象的使用者分开，使用者不必知晓其行为实现的细节，只须用设计者提供的消息来访问该对象。

继承性：继承性是子类共享其父类数据和方法的机制。它由类的派生功能体现。一个类直接继承其他类的全部描述，同时可修改和扩充。继承具有传递性。继承分为单继承（一个子类有一父类）和多重继承（一个类有多个父类）。类的对象是各自封闭的，如果没继承性机制，则类的对象中的数据、方法就会出现大量重复。继承不仅支持系统的可重用性，而且还促进系统的可扩充性。

多态性：对象根据所接收的消息而做出动作。同一消息被不同的对象接受时可产生完全不同的行动，这种现象称为多态性。利用多态性用户可发送一个通用的信息，而将所有的实现细节都留给接受消息的对象自行决定，如是，同一消息即可调用不同的方法。

9.1.4 面向对象编程和面向过程编程的比较
面向对象编程和面向过程编程是现在主流的两种编程模式，它们既有区别也有联系。
在面向对象编程出现以前，面向过程颇受程序人员的青睐，因为面向过程编程采用的是“自上而下，步步求精”的编程思想，人们更易于理解这种思想。将程序一步一步的分解，并按照一定的顺序执行。这就是面向过程程序设计，以过程为中心，以算法为驱动.

面向对象程序设计有其优点，但也带来了“副作用”——执行效率要低于面向过程程序设计。所以进行科学计算和要求高效率的程序中，面向过程设计要好于面向对象设计。而且面向对象程序的复杂度要高于面向过程的程序，如果程序比较小，面向过程要比面向对象更加清晰。

完整的面向对象概念应该是，对象 = 数据 + 方法

9.2 面向对象的基本概念

9.2.1 类
将具有相同属性及相同行为的一组对象称为类（class）。广义地讲，具有共同性质的事物的集合就称为类。在面向对象程序设计中，类是一个独立的单位，它有一个类名，其内部包括成员变量，用于描述对象的属性；还包括类的成员方法，用于描述对象的行为。在Java程序设计中，类被认为是一种抽象的数据类型，这种数据类型不但包括数据，还包括方法，这大大地扩充了数据类型的概念。

9.2.2 对象
对象（object）是类的实例化后的产物。对象的特征分为静态特征和动态特征两种。静态特征指对象的外观、性质、属性等。动态特征指对象具有的功能、行为等。

人们将对象的静态特征抽象为属性，用数据来描述，在Java语言中称之为变量，将对象的动态特征抽象为行为，用一组代码来表示，完成对数据的操作，在Java语言中称之为方法（method）。一个对象由一组属性和一系列对属性进行操作的方法构成。

在现实世界中，所有事物都可视为对象，对象是客观世界里的实体。而在Java里，“一切皆为对象”，它是一门面向对象的编程语言，面向对象（Object-Oriented）的核心就是对象。要学好Java，读者需要学会使用面向对象的思想来思考问题和解决问题。

9.2.3 类和对象的关系
面向对象的编程思想力图使在计算机语言中对事物的描述与现实世界中该事物的本来面目尽可能地一致，类和对象就是面向对象方法的核心概念。类是对某一类事物的描述，是抽象的、概念上的定义；对象是实际存在的该类事物的个体，因而也称作实例（instance）。

座椅设计图就是“类”，由这个图纸设计出来的若干的座椅就是按照该类产生的“对象”。可见，类描述了对象的属性和对象的行为，类是对象的模板。对象是类的实例，是一个实实在在的个体，一个类可以对应多个对象。

9.3 类的声明与定义
9.3.1 类的声明
在使用类之前，必须先声明它，然后才可以声明变量，并创建对象。声明类使用的是class关键字。声明一个类时，在class关键字后面加上类的名称，这样就创建了一个类，然后在类的里面定义成员变量和方法。

标识符可以是public、private、protected或者完全省略这个修饰符，类名称只要是一个合法的标识符即可，但从程序的可读性方面来看，类名称最好是由一个或多个有意义的单词连缀而成，每个单词首字母大写，单词间不要使用其他分隔符。

类的标识符可以是访问控制符。Java提供了一系列的访问控制符来设置基于类（class）、变量（variable）、方法（method）及构造方法（constructor）等不同等级的访问权限。Java的访问权限主要有4类。

⑴ 默认模式（default）。在默认模式下，不需为某个类、方法等不加任何访问修饰符。这类方式声明的方法和类，只允许在同一个包（package）内是可访问的。
⑵ private（私有）。这是Java语言中对访问权限控制最严格的修饰符。它仅能在当前声明它的类内部访问。类和接口（interface）的访问方式是不能被声明为私有的。
⑶ public（公有）。这是Java语言中访问权限控制最宽松的修饰符。如果一个类、方法、构造方法和接口等被声明为“公有”访问，那么它不仅可以被跨类访问，而且允许跨包访问。
⑷ protected（保护）。介于public 和 private 之间的一种访问修饰符。如果一个变量、方法和构造方法在父类中被声明为“保护”访问类型，只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。类和接口（interface）的访问方式是不能声明为保护类型的。

【范例9-1】 类的组成使用（Person.java）。

9.3.2 类的定义
在声明一个类后，还需要对类进行定义。对一个类定义而言，构造方法（constructor，又称构造器或构造函数）、属性和方法是三种最常见的成员，它们都可以定义零个或多个。

属性用于定义该类或该类的实例所包含的各种数据。方法则用于定义类中的行为特征或功能实现（即对数据的各种操作）。构造方法是一种特殊的方法，专用于构造该类的实例（如实例的初始化、分配实例内存空间等），Java语言通过new关键字来调用构造方法，从而返回该类的实例。

【范例9-2】 类的定义使用（ColorDefine.java）。

9.4 类的属性
类的基本组成部分包括属性和方法。类的属性也称为字段或成员变量，不过习惯上将它称为属性。方法就是解决一类问题的步骤的有序组合。
System.out.println()语句，它代表什么含义呢？事实上，System是系统类(class)，out是标准输出对象(object)，而println()是对象out中的一个方法(method)。这句话的完整含义就是调用系统类System中的标准输出对象out中的方法println()。

9.4.1 属性的定义
类的属性是变量。属性语法格式的详细说明如下。
⑴ 修饰符：修饰符可省略，也可是访问控制符public、protected、private及static、final，其中三个访问控制符public、protected和private只能使用其中之一， static和final则可组合起来修饰属性。

⑵ 属性类型：属性类型可以是Java允许的任何数据类型，包括基本类型（int、float等）和引用类型（类、数组、接口等）。

⑶ 属性名：从语法角度来说，属性名则只要是一个合法的标识符即可。属性名应该由一个或多个有意义的单词（或能见名知意的简写）连缀而成，推荐的风格是第一个单词应以小写字母作为开头，后面的单词则用大写字母开头，其他字母全部小写，单词间不使用其他分隔符。

⑷ 默认值：定义属性还可以定义一个可选的默认值。

9.4.2 属性的使用
【范例9-3】 类的属性组使用（usingAttribute.java）。

被static修饰的变量称为类变量（class's variables），它们被类的实例所共享。也就是说，某一个类的实例改变了这个静态值，其他这个类的实例也会受到影响。而成员变量（member variable）则是没有被static修饰的变量，为实例所私有，也就是说，每个类的实例都有一份自己专属的成员变量，只有当前实例才可更改它们的值。

9.5 对象的声明与使用

9.5.1 对象的声明
由类产生对象的基本形式。
类名 对象名 = new 类名（）；
创建属于某类的对象，需要通过下面两个步骤实现。⑴ 声明指向“由类所创建的对象”的变量。⑵ 利用new创建新的对象，并指派给先前所创建的变量。对象只有在实例化之后才能被使用，而实例化对象的关键字就是new。

当语句执行到Person p1的时候，只是在“栈内存”中声明了一个Person对象p1的引用，但是这个时候p1并没有在“堆内存”中开辟空间。对象的“引用”本质上就是一个对象在堆内存的地址，所不同的是，在Java中，用户无法向C/C++那样直接操作这个地址。本质上，“new Person()”就是使用new关键字，来调用构造方法Person()，创建一个真实的对象，并把这个对象在“堆内存”中的占据的内存首地址赋予p1，这时p1才能称为一个实例化的对象。

9.5.2 对象的使用
如果要访问对象里的某个成员变量或方法，可以通过下面的语法来实现。
对象名称.属性名 //访问属性
对象名称.方法名（） //访问方法

对于对象属性和方法点操作符“.”，笔者建议读者直接读成 “的”

【范例9-4】 使用Person类的对象调用类中的属性与方法的过程（ObjectDemo.java）。

9.5.3 匿名对象
匿名对象是指就是没有名字的对象。实际上，根据前面的分析，对于一个对象实例化的操作来讲，对象真正有用的部分是在堆内存里面，而栈内存只是保存了一个对象的引用名称（严格来讲是对象在堆内存的地址），所以所谓的匿名对象就是指，只开辟了堆内存空间，而没有栈内存指向的对象。

【范例9-5】创建匿名对象

匿名对象有如下两个特点。⑴ 匿名对象是没有被其他对象所引用，即没有栈内存指向。⑵ 由于匿名对象没有栈内存指向，所以其只能使用一次，之后就变成无法找寻的垃圾对象，故此会被垃圾回收器收回。

9.5.4 对象的比较
有两种方式可用于对象间的比较。（1）利用“==”运算符；（2）利用equals()方法。“==”运算符用于比较两个对象的内存地址值（引用值）是否相等，equals()方法用于比较两个对象的内容是否一致。

【范例9-6】 “==”运算符用于比较（CompareObject1.java）。
【范例9-7】 equals方法用于对象内容的比较（CompareObject2.java）。
“==”是比较对象内存地址值（即所谓的引用值）的，而“equals”是比较对象内容的。

9.5.5 对象数组的使用
我们可以把类理解为用户自定义的数据类型，它和基本数据类型（如int、float等）具有相同的地位。
对象也可以用数组来存放，可通过下面两个步骤来实现。
声明以类为数据类型的数组变量，并用new分配内存空间给数组。用new产生新的对象，并分配内存空间给它。
可以利用for循环来完成对象数组内的初始化操作，此方式属于动态初始化。或者也可以采用静态方式来初始化对象数组

【范例9-8】 用静态方式初始化对象数组（ObjectArray.java）。

9.6 高手点拨
1. 栈内存和堆内存的区别
在Java中，栈（stack）是由编译器自动分配和释放的一块内存区域，主要用于存放一些基本类型（如int、 float等）的变量、指令代码、常量及对象句柄（也就是对象的引用地址）。
栈内存的操作方式类似于数据结构中的栈（仅在表尾进行插入或删除操作的线性表）。栈的优势在于，它的存取速度比较快，仅次于寄存器，栈中的数据还可以共享。其缺点表现在，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。

堆（heap）是一个程序运行动态分配的内存区域，在Java中，构建对象时所需要的内存从堆中分配。这些对象通过new指令“显式”建立，放弃分配方式类似于数据结构中的链表。堆内存在使用完毕后，是由垃圾回收（Garbage Collection，简称GC）器“隐式”回收的。
堆的优势是在于动态地分配内存大小，可以“按需分配”，其生存期也不必事先告诉编译器，在使用完毕后，Java的垃圾收集器会自动收走这些不再使用的内存块。其缺点为，由于要在运行时才动态分配内存，相比于栈内存，它的存取速度较慢。

由于栈内存比较小，如果栈内存不慎耗尽，就会产生著名的堆栈溢出（stackoverflow）问题，这能导致整个运行中的程序崩溃（crash）。
类似的，如果堆内存使用不当也会产生问题，典型的问题就是内存碎片（fragmentation），当回收堆内存时，可能会导致一些小块的但不连续的内存存在。当用户申请一块较大的堆内存，虽然可用的小块内存总和足够大，本可以满足申请所需，但是由于它们不连续，导致申请失败。这些不可用的非连续的小块内存就是所谓的内存碎片。

2. 面向对象编程与面向过程编程的感性认知
面向过程程序设计主要的弊病是上一步和下一步环环相扣，如果需求发生变化那么代码的改动会很大，这样很不利于对软件的后期维护和扩展。

9.7 实战练习
1. 定义一个包含name、age和like属性的Person类，实例化并给对象赋值，然后输出对象属性。
2. 定义一个book类，包括属性title（书名）和price（价格），并在该类中定义一个方法printInfo()，来输出这2个属性。然后再定义一个主类，其内包括主方法，在主方法中，定义2个book类的实例bookA和bookB，并分别初始化title和price的值。然后将bookA赋值给bookB，分别调用printInfo()，查看输出结果并分析原因。
3. 定义一个book类，包括属性title（书名）、price（价格）及pub（出版社），pub的默认值是“天天精彩出版社”，并在该类中定义方法getInfo()，来获取这三个属性。再定义一个公共类BookPress，其内包括主方法。在主方法中，定义3个book类的实例b1，b2和b3，分别调用各个对象的getInfo()方法，如果“天天精彩出版社”改名为“每日精彩出版社”，请在程序中实现实例b1，b2和b3的pub改名操作。完成功能后，请读者思考一下，如果book类的实例众多，有没有办法优化这样的批量改名操作？