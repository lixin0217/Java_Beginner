第10章 重复调用的代码块—方法

在面向对象的程序设计中，方法是一个很重要的概念，体现了面向对象三大要素中“封装”的思想。“方法”又被称为“函数”，在其他的编程语言中都有这个概念，其重要性也是不言而喻的。

在本质上，一个类描述了两件事情。⑴ 一个对象知道什么（what’s an object knows）? ⑵ 一个对象能做什么（what’san object does）？第1件事情对应于对象的属性（或状态）。第2件事情对应于对象的行为（或方法）。

【范例10-1】 Person类（Person.java）。

10.1 方法的基本定义
方法（method）用来实现类的行为。一个方法通常是用来完成一项具体的功能（function），所以方法在C++中也称为成员函数（member function）。英文“function”的这两层含义（函数与功能）在这里都能得到体现。

在Java语言中，每条指令的执行都是在某个特定方法的上下文中完成的。方法的使用者（对象）只要将数据传递给方法体（要么通过方法中的参数传递，要么通过对象中的数据成员共享），就能得到结果，而无需关注方法的具体实现细节。当我们需要改变对象的属性(状态)值时，就让对象去调用对应的方法，方法通过对数据成员（实例变量）一系列的操作，然后就再将操作的结果返回。

在Java中，方法定义在类中，它和类的成员属性（数据成员）一起构建一个完整的类。构成方法有四大要素。返回值类型、方法名称、参数、方法体。这是一种标准，在大多数编程语言中都是通用的。

所有方法均在类中定义和声明。方法包含一个方法头（method header）和一个方法体。方法头包括修饰符、返回值类型、方法名和参数列表等.
修饰符（modifier）：定义了该方法的访问类型。这是可选的，它告诉编译器以什么调用该方法。
返回值类型（return type）：指定了方法返回的数据类型。它可以是任意有效的类型，包括构造类型(类就是一种构造类型)。如果方法没有返回值，则其返回类型必须是void。方法体中的返回值类型要与方法头中定义的返回值类型一致。
方法名（method name）：方法名称的命名规则遵循Java标识符命名规范，但通常方法名以英文中的动词开头。这个名字可以是任意合法标识符。
参数列表（parameter list）：参数列表是由类型、标识符组成的序列，每对之间用逗号分开。参数实际上是方法被调用时接收传递过来的参数值的变量。如果方法没有参数，那么参数表为空的，但是圆括号不能省略。参数列表可将该方法需要的一些必要的数据传给该方法。方法名和参数列表共同构成方法签名，一起来标识方法的身份信息。
方法体（body）：方法体中存放的是封装在{}内部的逻辑语句，用以完成一定的功能。

10.2 方法的使用
【范例10-2】 方法的使用（PersonTest.java）。

方法是操作对象属性（数据成员）的行为。这里的“操作”可以广义的分为两大类：读和写。读操作的主要目的是“获取”对象的属性值，这类方法可统称为Getter方法。写操作的主要目的是“设置”对象的属性值，这类方法可统称为Setter方法。因此，在Person类中，talk()方法属于Getter类方法，而setName()和setAge()方法属于Setter类方法。

10.3 方法中的形参与实参
在定义一个方法时，参数列表中的参数个数至少为1个，有了这样的参数才有提供外部传递消息至本方法的可能。这些参数被称为形式参数，简称形参（parameter）。而在调用这个方法时，需要调用者提供与原方法定义相匹配的参数（类型、数量及顺序都一致），这些实际调用时提供的参数称为实际参数，简称实参（argument）

形参和是实参的关系如下。
⑴ 形参变量隶属于方法体，也就是说它们是方法的局部变量，只当在被调用时才被创建，才被临时性的分配内存，在调用结束后，立即释放所分配的内存单元。也就是说，当方法调用返回后，就不能再使用这些形式参数。
⑵ 在调用方法时，实参和形参在数量上、类型上、顺序上应严格保证一一对应的关系，否则就会出现参数类型不匹配的错误，从而导致调用方法失败。

10.4 方法的重载
编译器为了区分这些函数，除了用方法名这个特征外，还会用到方法的参数列表区分不同的方法。方法的名称及其参数列表（参数类型+参数个数）一起构成方法的签名（method signature）。这种使用方法名相同但参数列表不同的方法签名机制，称之为方法的重载(method overload)。在调用的时候，编译器会根据参数的类型或个数不同来执行不同的方法体代码。

【范例10-3】 重载方法valueOf的使用演示（OverloadValueOf.java）。

使用了方法重载机制，在进行方法调用时就省了不少的麻烦事，对于相同名称的方法体，由编译器根据参数列表的不同，去区分调用哪一个方法体。

【范例10-4】 重载方法println的使用（ShowPrintlnOverload.java）。
在读者自定义设计重载方法时，读者需要注意以下3点，这些重载方法之间。
⑴ 方法名称相同。
⑵ 方法的参数列表不同（参数个数、参数类型、参数顺序，至少有一项不同）。
⑶ 方法的返回值类型和修饰符不做要求，可以相同，也可以不同。

【范例10-5】 加法方法的重载（MethodOverload.java）。
Java方法重载是通过方法的参数列表的不同来加以区分实现的。虽然方法名称相同，由于它们的方法签名不同（方法签名包括函数名及参数列表），在本质上，对于编译器而言，它们是完全不同的方法，所以可被编译器无二义性地加以区分。方法的签名仅包括方法名称和参数，因此方法重载不能根据方法的不同返回值来区分不同方法，因为返回值不属于方法签名的一部分。

10.5 构造方法
构造方法与普通方法的差别在于，它是专用于在构造对象时初始对象成员的，其名称和其所属类名相同。

10.5.1 构造方法
在讲解构造方法的概念之前，首先来回顾一下对象声明并实例化的格式。
类名称 对象名称 = new 类名称（）；
下面分别来观察这一步的4层作用。⑴ 类名称：表示要定义变量的类型，只是有了类之后，变量的类型是由用户自己定义的；⑵ 对象名称：表示变量的名称，变量的命名规范与方法相同，例如：studentName；⑶ new：是作为开辟堆内存的唯一方法，表示实例化对象；⑷ 类名称()：这就是一个构造方法。

所谓构造方法，就是在每一个类中定义的，并且是在使用关键字new实例化一个新对象的时候默认调用的方法。在Java程序里，构造方法所完成的主要工作是对新创建对象的数据成员赋初值。可将构造方法视为一种特殊的方法

在使用构造方法的时候需注意以下几点。⑴ 构造方法名称和其所属的类名必须保持一致。⑵ 构造方法没有返回值，也不可以使用void。⑶ 构造方法也可以向普通方法一样被重载（参见10.4节）。⑷ 构造方法不能被static和final修饰。⑸ 构造方法不能被继承，子类使用父类的构造方法需要使用super关键字（参见第12章）。

【范例10-6】 Java中构造方法的使用（TestConstruct.java）。
读者在执行javac编译java程序的时候，如果在程序中没有明确声明一个构造方法的话，编译器会自动为该类添加一个无参数的构造方法，类似于下表所示的代码。

10.5.2 构造方法的重载
构造方法的名称是固定的—它们必须和类名保持一致，那么构造方法的重载，自然要体现参数列表的不同。也就是说，多个重载的构造方法彼此之间，参数个数、参数类型和参数顺序至少有一项是不同的。只要构造方法满足上述条件，便可定义多个名称相同的构造方法。

【范例10-7】 构造方法的重载（ConstructOverload.java）。
从本程序可以发现，构造方法的基本功能就是对类中的属性初始化，在程序产生类的实例对象时，将需要的参数由构造方法传入，之后再由构造方法为其内部的属性进行初始化，这是在一般开发中经常使用的技巧。但是有一个问题是需要读者注意，就是无参构造方法的使用

【范例10-8】 使用无参构造方法时产生的错误（ConstructWithNoPara.java）。
在Java程序中一旦用户显式声明了构造方法，那么默认的“隐式的”构造方法就不会被编译器生成。而要解决这一问题，只需要简单地修改一下Person类就可以达到目的——即在Person类中明确地声明一个无参数的构造方法

【范例10-9】 正确使用无参构造方法（ConstructOverload.java）。
无参构造方法由于无法从外界获取赋值信息，就用默认值初始化了类中的数据成员name和age

10.5.3 构造方法的私有化
一个方法可根据实际需要，将其设置为不同的访问权限——public（公有访问）、private（私有访问）或默认访问（即方法前没有修饰符）。同样，构造方法也有public与private之分。到目前为止，前面的范例所使用的构造方法均属于public，它可在程序的任何地方被调用，所以新创建的对象也都可以自动调用它。如果构造方法被设为private，那么其他类中就无法调用该构造方法。换句话说，在本类之外，就不能通过new关键字调用该构造方法创建该类的实例化对象。

【范例10-10】 构造方法的私有化（PrivateCallDemo.java）。
由于PrivateDemo类的构造方法PrivateDemo()被声明为private（私有访问），则该构造方法在外类是不可访问的，或者说它在其他类中是不可见的。

【范例10-11】 构造方法的私有使用范例（PrivateConstructor.java）。构造方法虽然被私有了，但并不一定是说此类不能产生实例化对象，只是产生这个实例化对象的位置有所变化，即只能在私有构造方法所属类中产生实例化对象。

实例化对象需要调用构造方法，但如果将构造方法使用private藏起来，则外部肯定无法直接调用，那么实例化该类对象就只能有一种途径——在该类内部用new关键字创建该类的实例。通过这个方式，我们就可以确保一个类只能创建一个实例化对象。在软件工程中，这种设计模式被称之为单态设计模式(SingletonDesign Pattern)。

【范例10-12】 构造方法的私有使用范例2（TestSingleDemo.java）。

10.6 在方法内部调用方法
在一个Java程序中是可以通过对象去调用类中的各种方法。当然，类的内部也能互相调用彼此的方法
【范例10-13】 在类的内部调用方法（TestPerson.java）。

10.7 方法的递归调用
在程序设计领域，递归是指函数（或方法）直接或间接调用自身的一种操作，如下图所示。递归调用能够大大减少代码量，将原本复杂的问题简化成一个简单的基础操作来完成。在编码过程中“递归调用”是一个非常实用的技巧。

递归程序一定要有结束条件，这又被称作递归出口。如果一个递归函数缺少递归出口，执行时就会陷入死循环，其后果非常严重。递归出口可用if语句来控制，在满足某种条件时继续递归调用自身，否则就不再继续。

【范例10-14】 计算“1+2+3+…+n”，递归和非递归实现（RrecursionMethod. java）。
递归通过对方法本身的压栈和弹栈的方式，将每一层的结果逐级返回，通过逐步累加求得结果

虽然递归操作有许多的优点，但是缺点也很明显。使用递归实现需要函数压栈和弹栈的操作，所以程序的运行速度比不用递归实现要慢的多。如果操作不慎还极易出现死循环，读者编写代码过程中需要多加注意，一定要设置递归操作的终止条件。

10.8 代码块
代码块是一种常见的代码形式。它用大括号“{ }”将多行代码封装在一起，形成一个独立的代码区域，这就构成了代码块。
代码块有四种。⑴ 普通代码块。⑵ 构造代码块。⑶ 静态代码块。⑷ 同步代码块。代码块不能够独立运行，须要依赖于其他配置。

10.8.1 普通代码块
普通代码块是最常见的代码块.在方法名后（或方法体内）用一对“{ }”括起来的数据块就是普通代码块。它不能够单独存在于类中，需要紧跟在方法名后面，并通过方法调用。

【范例10-15】 普通代码块演示（NormalCodeBlock.java）。

10.8.2 构造代码块
构造代码块就是在类中直接定义的，且没有任何前缀、后缀以及修饰符的代码块。在一个类中，至少需要有一个构造方法（如果用户自己不显式定义，编译器会“隐式”地配备一个），它在生成对象时被调用。构造代码块和构造方法一样是在对象生成时被调用，但是它的调用时机比构造方法还要早。

构造代码块可用来初始化成员变量。如果一个类中有多个构造方法，这些构造方法都需要初始化成员变量，那么就可以把每个构造方法中相同的代码部分抽取出来，集中一起放在构造代码块中。这样利用构造代码块来初始化共有的成员变量，可大大减少不同构造方法中重复的代码，提高代码的复用性。

【范例10-16】 构造代码块演示（ConsCodeBlock.java）。
构造代码块中的初始化是一个类的所有构造方法都共有的“交集”部分，具有个性化特征的初始化还是要放在各自的构造方法中。

构造代码块不在任何方法之内，仅位于类的范围内，它的地位和其他方法体是对等的，可以理解为构造代码块是没有名称的方法体，但仅限用于对类数据成员的初始化，且仅运行一次。

10.8.3 静态代码块

使用static关键字加以修饰并用大括号“{ }”括起来的代码块称为静态代码块，其主要用来初始化静态成员变量。它是最早执行的代码块。
【范例10-17】 静态代码块演示（StaticCodeBlock.java）。
静态代码块的执行时间主方法main()方法都要早。静态块还优先于构造方法的执行，而且不管有多少个实例化对象产生（本例中创建了3个对象），静态块都只执行一次。利用这种特性，静态代码块可以被用来初始化类中的静态成员变量。静态成员变量是属于所有类对象共享的，故此不会受到创建对象个数的影响。

10.9 方法与数组
数组也是常见的一种数据结构，几乎所有的编程语言都支持。在Java数组中存放的是一组类型相同的数据序列，并通过下标对数组元素进行访问。在基本数据类型构成的数组的基础上，抽象出了数组对象，整合了一系列具有相同特点的数据。再进一步地扩展，便构成功能更加强大的“集合”。从本质上来说，它们都是存储数据的容器（container）。与存储单个数据的变量相比较，它们存储的是多个数据，或是多组数据（如map集合等）。

10.9.1 数组引用传递
在Java语言中， b = a（a和b都是引用名）的含义就是将a起个别名"b"。之后，a和b其实就是指向的是同一个对象。在Java中，这种给变量取别名的机制称之为引用（reference）。抽象的概念都源于具体的表象。这些表象有不同的“名称”，在本质上，指向的事物都是同一个。

在Java中，所有对象都是通过引用进行操作的。而数组也是一种对象。当将数组作为参数传递给方法时，传递的实际上就是该数组对象的引用。在方法中对数组的所有操作，都会映射到原数组中，这一点也是Java面向对象的一个重要特点。

所谓的数组引用传递，就是将一块数组的堆内存空间交由多个栈内存所指向。这包括了方法通过参数列表接收数组和方法计算完毕后返回数组等两种情况，但不管数组操作形式如何改变，最终都属于引用传递。请注意，除了对象有这种特性外，整型、浮点型、布尔型等基本数据类型都不具备该特性。

【范例10-18】 演示数组的引用传递 （ArrayReference.java）。

10.9.2 在方法中实现排序
排序算法有很多，比较著名的有快速排序算法、冒泡排序算法、选择排序算法、归并排序算法等。每种算法都有优缺点，在合适的场景选择合适的算法能够提高程序的性能。下面我们将通过冒泡排序算法演示如何对数组进行排序。

【范例10-19】 在方法中对数组进行排序 （ArraySort.java）。

10.9.3 让方法返回数组
方法的返回值可以是Java所支持的任意一种类型。数组作为对象同样也可以成为方法的返回值。修改【范例10-19】的排序函数，改变其返回值类型为整型数组（int[]）

【范例10-20】 演示方法返回数组 （ArrReturn.java）。

10.10 与数组有关的操作方法
Java对系统开发支持地非常好。一般来说，对于一些常用的功能，都会有相应的开发包支持，对于用户而言，比较麻烦的是要为这些开发包实施单独的配置，了解这些包提供的应用程序接口。Java对数组进行了封装和抽象，实现了Array接口。一些框架集合（collection）继承了接口，对数组的功能进行了扩展，形成了一类功能强大的工具集。在Java中，针对数组操作的支持主要有两个，数组的克隆和数组的排序。

10.10.1 数组的克隆
由基本数据类型构建的数组，如：int []、 double[] 等，Java提供的内置方法并不是很多，最常用的方法是clone()方法，它会将数组复制一份，返回一个新的引用，常用来复制数组。数组对象提供的length属性用于记录数组的长度，即数组中包含元素的个数。

【范例10-21】 数组有关的操作方法（ArrayMethod.java）。

Java的所有类都默认继承java.lang.Object类，在java.lang.Object类中有一个方法clone()。这个方法将返回Object对象的一个拷贝。
“克隆”（拷贝）对象返回的是一个新对象，而不是一个已有对象的引用。“克隆”（拷贝）对象与用 new操作符返回的新对象是有区别的，克隆对象是拷贝某个对象的当前信息，而不是对象的初始信息。

10.10.2 数组的排序
实施上，Java提供了大量的成熟的开发库，基于这些开发包库，合理的使用它们能极大地提高我们的开发效率。

【范例10-22】 使用Java的包库对数组进行排序。

10.12 实战练习
 * 1. 编程实现，现在有如下的一个数组。
 * int oldArr[] = {1,3,4,5,0,0,6,6,0,5,4,7,6,7,0,5}
 * 要求将以上数组中值为0的项去掉，将不为0的值存入一个新的数组，生成的新数组为。
 * int newArr[] = {1,3,4,5,6,6,5,4,7,6,7,5}
 * 提示:需要确定新数组的大小，需要知道原始数组之中不为0的个数，可编写一个方法完成；
 * 根据统计的结果开辟一个新的数组；将原始数组之中不为0的数据拷贝到新数组之中。

2. 编程实现，要求程序输出某两个整数之间的随机数。
提示：输出随机数需要用到Math.random()方法。