本章的实例虽然非常简单，但基本涵盖了本篇所讲的内容。可以通过本章来概览Java程序的组成及内部部件（如Java中的标识符、关键字、变量、注释等）。同时，本章还涉及到Java程序错误的检测及Java编程风格的注意事项。

3.1 一个简单的例子
从本章开始，我们正式学习Java语言的程序设计。除了认识程序的架构外，本章还将介绍修饰符、关键字以及一些基本的数据类型。通过简单的范例，让读者了解到检测与提高程序可读性的方法，以培养读者良好的编程风格和正确的程序编写习惯。

【范例3-1】 Java程序简单范例（代码TestJava3 1.java）。

3.2 感性认识Java程序
3.2.1 认识Java程序的框架
1. 大括号、段及主体
将类名称定出之后，就可以开始编写类的内容。左大括号“{”为类的主体开始标记，而整个类的主体至右大括号“}”结束。每个命令语句结束时，都必须以分号“;”做结尾。当某个命令的语句不止一行时，必须以一对大括号“{}”将这些语句包括起来，形成一个程序段（segment）或是块（block）。

2. 程序运行的起始点 —— main() 方法
Java程序是由一个或一个以上的类组合而成，程序起始的主体也是被包含在类之中。这个起始的地方称为main()，用左右大括号将属于main()段的内容包围起来，称之为“方法”（method）。main()方法为程序的主方法，如同中国的古话“家有千口，主事一人”。类似的，在一个Java程序中，不论它有千万行，执行的入口只能有一个，而这个执行的入口就是main()方法，它有且仅有一个。

3.2.2 认识标识符
Java中的包（package）、类、方法、参数和变量的名称，可由任意顺序的大小写字母、数字、下划线（_）和美元符号（$）等组成，但这些名称的标识符不能以数字开头，也不能是Java中保留的关键字。

3.2.3 认识关键字
和其他语言一样，Java中也有许多关键字（Keywords，也叫保留字），如public、static、int等，这些关键字不能当做标识符使用。在程序开发中一旦使用了这些关键字做标识符，编译器在编译时就会报错，而对智能的编辑器（如Eclipse等）会在编写代码时自动提示这些语法错误。

3.2.4 认识注释
注释在源代码中的地位非常重要，虽然注释在编译时被编译器自动过滤掉，但为程序添加注释可以解释程序的某些语句的作用和功能，提高程序的可读性。
Java里的注释根据不同的用途分为以下3种类型。
⑴ 单行注释。⑵ 多行注释。⑶ 文档注释。
单行注释，就是在注释内容的前面加双斜线（//），Java编译器会忽略这部分信息。
多行注释，就是在注释内容的前面以单斜线加一个星形标记（/*）开头，并在注释内容末尾以一个星形标记加单斜线（*/）结束。当注释内容超过一行时，一般可使用这种方法
文档注释，是以单斜线加两个星形标记（/**）开头，并以一个星形标记加单斜线（*/）结束。用这种方法注释的内容会被解释成程序的正式文档，并能包含进如javadoc之类的工具生成的文档里，用以说明该程序的层次结构及其方法。

还可以用程序注释来暂时屏蔽某些程序语句，让编译器暂时不要处理这部分语句，等到需要处理的时候，只需把注释标记取消即可。这也是程序调试一种技巧。注释在调试和后期的维护过程中也有重要作用，请读者务必重视。

3.2.5 认识变量
在Java程序设计中，变量（Variable）在程序语言中扮演着最基本的角色，它是存储数据的载体。计算机中的变量是实际存在的数据。变量的数值可以被读取和修改，它是一切计算的基础。
与变量相对应的就是常量（Constant），顾名思义，常量是固定不变的量，其一旦被定义并赋初值后，它的值就不能再被改变。
Java变量使用和其他高级计算机语言一样：先声明，后使用。即必须实现声明它想要保存数据的类型。

3.2.6 认识数据类型
除了整数类型之外，Java还提供有多种数据类型。Java的变量类型可以是整型（int）、长整型（long）、短整型（short）、浮点型（float）、双精度浮点型（double），或者字符型（char）和字符串型（String）等。

整型是取值为不含小数的数据类型，包括byte类型、short类型、int类型及long类型，默认情况下为int类型，可用八进制、十进制及十六进制来表示。另一种存储实数的类型是浮点型数据，主要包括float型（单精度浮点型，占4个字节）和double型（双精度浮点型，占8个字节）。用来表示含有小数点的数据，必须声明为浮点型。在默认情况下，浮点数是double型的。如果需要将某个包括小数点的实数声明为单精度，则需要在该数值后加字母‘F’（或小写字母‘f’）。

3.2.7 认识运算符和表达式
最简单的算术运算符是加（“+”）、减（“-”、）、乘（“*”）、除（“/”）、取余（“%”）等。表达式则是由操作数与运算符所组成，操作数可以是常量、变量，甚至可以是方法。

3.2.8 认识类
Java程序是由类（class）所组成。类是一种用户自定义的类型就可以了，所有的Java程序都是由类组成的。
需要注意的是：由于Java程序是由类所组成，因此在一个完整的Java程序里，至少需要有一个类。

Java提供了一系列的访问控制符来设置基于类（class）、变量（variable）、方法（method）及构造方法（constructor）等不同等级的访问权限。Java的访问权限主要有4类：默认模式（default）、private（私有）、public（公有）和protected（保护）。

3.2.9 输入与输出
在Java中，流（Stream）是一个重要的但初学者很容易困惑的概念。输入/输出（I/O）是指程序与外部设备或其他计算机进行交互的操作。几乎所有的程序都具有输入与输出功能，如从键盘上读取数据，向屏幕或文件输出数据等。通过输入和输出操作可以从外界接收信息，或者把信息传递给外界。Java把这些输入与输出操作用流的模式来实现，通过统一的接口来表示，从而使程序设计更为简单。

流的方向是重要的，根据流的方向，流可大致分为两类：输入流和输出流。当程序需要读取数据时，就会开启一个通向数据源的管道，程序可从该管道中提取数据，这种模式下的流称之为输入流。类似地，如果程序想要输出数据，也会建立一个通往输出目的地管道，一旦建立后，程序就可以经由此管道输出数据，这种模式的流称之为输出流。

作为程序输入数据源，其对象可以是键盘，也可以是某个文件或磁盘。作为程序输出数据源，其对象可以是显示器，也可以是某个文件或磁盘。为了方便一些频繁的设备交互，Java语言系统预定了3个可以直接使用的流对象，它们分别是：⑴ System.in（标准输入），通常代表键盘输入。⑵ System.out（标准输出）：通常输出到终端显示器。⑶ System.err（标准错误输出）：通常将错误信息输出到终端显示器。

【范例3-3】 简单的输入、输出流使用范例（StreamInTest3 3.java）。

3.3 程序的检测

【范例3-4】 找出下面程序中的语法错误（代码TestJava3 4.java）。

3.3.2 语义错误
若程序本身的语法都没有错误，但是运行后的结果却不符合程序设计者的要求，此时可能犯了语义错误，也就是程序逻辑上的错误。

【范例3-5】 程序语义错误的检测（TestJava3 5.java）。

3.4 提高程序的可读性
【范例3-6】 缩进格式的程序（TestJava3 6.java）。
【范例3-7】 非缩进格式的程序（代码TestJava3 7）。


注意Java源代码中的字符半角和全角之分
Java继承了C/C++的很多语法，其中一个语法就是每个语句（Statement）后加一个分号“;”作为本语句的结束。

3.6 实战练习
1.分析下面程序代码的运行结果，运行程序并查看实际结果，分析产生结果的原因。

2. 用float型定义变量：float f = 3.14; 是否正确? （Java面试题）
解析:不正确。
赋值运算符（=）左右两边的精度类型不匹配。在默认情况下，包含小数点的实数，如本题中的3.14，被存储为double类型（即双精度），而float类型定义的变量，如本题中的f，是单精度的。如果想让上面的语句编译正确，应该对赋值运算符（=）右边的值做强制类型转换，即把常量3.14强制转换为单精度（即float类型），如下所示：
float f = (float)3.14;

或者，一开始就把3.14存储为单精度类型，在3.14后加上小写字母‘f’或大写字母‘F’
float f = 3.14f;
float f = 3.14F;