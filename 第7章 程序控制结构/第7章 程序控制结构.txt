第7章 程序执行方向—程序控制结构

程序之所以能够按照人们的意愿执行，主要依靠的是程序的控制结构。本章重点介绍选择（如if…else语句、switch语句等）与循环结构语句（如while、do-while循环及for循环等）。

7.1 程序逻辑
结构化程序设计（Structured programming）是一种经典的编程模式，在1960年开始发展，其思想最早是由荷兰著名计算机科学家E.W. Dijkstra提出的，他设计了一套规则，使程序设计具有合理的结构，用以保证程序的正确性。这套规则要求程序设计者按照一定的结构形式来设计和编写程序，而不是“天马行空”地根据程序员的意愿来编写。早期的程序员广泛使用GOTO语句，而自从结构化编程思想推广以来，它已经日益淡出程序设计的舞台。

结构化程序设计语言，强调用模块化、积木式的方法来建立程序。采用结构化程序设计方法，可使程序的逻辑结构清晰、层次分明、可读性好、可靠性强，从而提高了程序的开发效率，保证了程序质量，改善了程序的可靠性。一般来说程序的结构包含以下3种。
⑴ 顺序结构。
⑵ 选择结构。
⑶ 循环结构。
这3种不同的结构有一个共同点，就是它们都只有一个入口，也只有一个运行出口。程序中使用了上面这些结构到底有什么好处呢？这些单一的入口、出口可让程序可控、易读、好维护。

7.1.1 顺序结构
 结构化程序的最简单的结构就是顺序结构。所谓顺序结构程序就是按书写顺序执行的语句构成的程序段
 通常情况下，顺序结构是指按照程序语句出现的先后顺序一句一句地执行。

7.1.2 分支结构
选择结构也称为分支结构，在许多实际问题的程序设计中，根据输入数据和中间结果的不同，需要选择不同的语句组执行。在这种情况下，必须根据某个变量或表达式的值作出判断，以决定执行哪些语句和不执行哪些语句

7.1.3 循环结构
循环结构是程序中的另一种重要结构，它和顺序结构、选择结构共同作为各种复杂程序的基本构造部件。循环结构的特点是在给定条件成立时，反复执行某个程序段。通常我们称给定条件为循环条件，称反复执行的程序段为循环体。循环体可以是复合语句、单个语句或空语句。在循环体中也可以包含循环语句，实现循环的嵌套。

7.2 选择结构
Java语言中的选择结构提供了以下两种类型的分支结构。
条件分支：根据给定的条件进行判断，决定执行某个分支的程序段。
开关分支：根据给定整型表达式的值进行判断，然后决定执行多路分支中的一支。

条件分支主要用于两个分支的选择，由if 语句和if…else 语句来实现。开关分支用于多个分支的选择，由switch 语句来实现。在语句中加上了选择结构之后，就像是十字路口，根据不同的选择，程序的运行会有不同的结果。

7.2.1 if语句
if 语句（if-then Statement）用于实现条件分支结构，它在可选动作中作出选择，执行某个分支的程序段。if 语句有两种格式在使用中供选择。要根据判断的结构来执行不同的语句时，使用if 语句是一个很好的选择，它会准确地检测判断条件成立与否，再决定是否要执行后面的语句。

7.2.2 if…else语句
if...else语句（if-then-else Statement）是根据判断条件是否成立来执行的。如下图所示，如果条件表达式的值为真，则执行if中的语句块1，判断条件不成立时，则会执行else中的语句块2，然后继续执行整个if语句后面的语句。语句体1和语句体2可以是一条语句，也可以是复合语句。

【范例7-1】 if语句的使用（ifElseDemo7 1.java）。

7.2.3 if…else if…else语句
由于if语句体或else语句体可以是多条语句，所以如果需要在if..else里判断多个条件,可以“随意”嵌套。比较常用的是if…else if … else语句

【范例7-2】 多分支条件语句的使用（multiplyIfElse7 2.java）。

7.2.4 多重选择──switch语句
可使用switch语句来实现多重选择情况的处理。switch结构称为“多路选择结构”，switch语句也叫开关语句，在许多不同的语句组之间作出选择。

switch的表达式类型为整型（包括byte、short、char、int等）、字符类型及枚举类型。
case（情况）后的常量选择值要和表达式的数据类型一致，并且不能重复。break语句用于转换程序的流程，在switch结构中使用break语句可以使程序立即退出该结构，转而执行该结构后面的第1条语句。

【范例7-3】 多分支条件语句的使用（switchDemo7 3.java）。

7.3 循环结构
循环结构是程序中的另一种重要结构。它和顺序结构、选择结构共同作为各种复杂程序的基本构造部件。循环结构的特点是在给定条件成立时，反复执行某个程序段。通常我们称给定条件为循环条件，称反复执行的程序段为循环体。循环体可以是复合语句、单个语句或空语句。循环结构包括while循环、do…while循环、for循环，还可以使用嵌套循环完成复杂的程序控制操作。

7.3.1 while循环
while循环语句的执行过程是先计算表达式的值，若表达式的值为真，则执行循环体中的语句，继续循环；否则退出该循环，执行while语句后面的语句。循环体可以是一条语句或空语句，也可以是复合语句。

【范例7-4】 while循环的使用（whileDemo7 4.java）。

7.3.2 do…while循环
“直到型循环”至少会执行一次循环体。该循环由其关键字又称为do…while循环。

do...while循环的执行过程是先执行一次循环体，然后判断表达式的值，如果是真，则再执行循环体，继续循环；否则退出循环，执行下面的语句。循环体可以是单条语句或是复合语句，在语法上它也可以是空语句，但此时循环没有什么实际意义。

【范例7-5】 do…while循环语句的使用（doWhileDemo7 5.java）。

7.3.3 for循环
在for循环中，赋初始值语句、判断条件语句、增减标志量语句均可有可无。循环体可以是一条语句或空语句，也可以是复合语句。

【范例7-6】 for循环的使用（forDemo7 6.java）。

7.3.4 foreach循环
很多时候，从头到尾遍历操作一个数组（array）、集合框架（collections）等中所有元素，是很常见的需求。
在SDK5以后，Java提供了for语句的特殊简化版本foreach语句块（有时也称为增强的for循环）。foreach语句为遍历诸如数组、集合框架等内的元素提供了很大便利。foreach并不是一个关键字，仅是在习惯上将这种特殊的for语句格式称之为“foreach”语句。从英文字面意思理解foreach也就是“为（for）每一个（each）”的意思，其本身的含义都有“遍历”元素的意思。

所有foreach均可用传统的for循环模式代替。由于foreach循环会丢失元素的下标信息，当遍历集合或数组时，如果需要集合或数组元素的下标，推荐使用传统for循环方式。

7.3.5 循环嵌套
当循环语句中又出现循环语句时，就称为循环嵌套。如嵌套for循环、嵌套while循环等。当然读者也可以使用混合嵌套循环，也就是循环中又有其他不同种类的循环。

【范例7-7】 for循环嵌套的使用（forDemo7 6 2.java）。

7.4 循环的跳转

在Java语言中，有一些跳转的语句，如break、continue以及return等语句。break语句、continue语句和return语句都是用来控制程序的流程转向的，适当和灵活地使用它们可以更方便或更简洁地进行程序的设计。

7.4.1 break语句
break语句不仅可以用在switch语句中，在while、for、do-while等循环语句结构中的循环体或语句组中也可以使用break语句，其作用是使程序立即退出该结构，转而执行该结构下面的第1条语句。break语句也称之为中断语句，它通常用来在适当的时候退出某个循环，或终止某个case并跳出switch结构。

break语句有两种用法，最常见的就是不带标签的break语句。另外一种情况就是带标签的break语句，它可以协助跳出循环体，接着运行指定位置语句。

1. 不带标签的break
【范例7-8】 break语句的使用（breakDemo7 8.java）。

2. 带标签的break
不带标签的break只能跳出包围它的最小代码块，如果想跳出包围它的更外层的代码块，可以使用带标签的break语句。
【范例7-9】 带标签的break语句的使用（breakLabelDemo7 9.java）。

7.4.2 continue语句
在while、do…while和for语句的循环体中，执行continue语句将结束本次循环而立即测试循环的条件，以决定是否进行下一次循环。类似于break语句有两种用法，continue语句也有两种用法：一种是最常见的就是不带标签的continue语句。另外一种情况就是带标签的continue语句，它可以协助跳出循环体，接着运行指定位置语句。

1. 不带标签的continue语句
break语句是跳出当前层循环，终结的是整个循环，也不再判断循环条件是否成立；相比而言，continue语句则是结束本次循环（即continue语句之后的语句不再执行），然后重新回到循环的起点，判断循环条件是否成立，如果成立，则再次进入循环体，若不成立，跳出循环。

【范例7-10】 continue语句的使用（continueDemo7 10.java）。

2. 带标签的continue语句
continue语句和break语句一样可以和标签搭配使用，其作用也是用于跳出深度循环。
continue后的标签，必须标识在循环语句之前，使程序的流程在遇到continue之后，立即结束当次循环，跳入标签所标识的循环层次中，进行下一轮循环。

【范例7-11】 带标签的continue语句的使用（continueLabelDemo7 11.java）。

7.4.3 return语句
return语句可以使程序的流程离开return语句所在的方法，到目前为止我们所写的程序都只有一个main方法，所以读者目前可以简单的认为return语句就是使程序结束的语句。

【范例7-12】 break语句的使用（returnDemo7 12.java）。

7.6 实战练习
1. 编写程序，使用循环控制语句计算“1+2+3+…+100”的值。
2. 编写程序，使用程序产生1-12之间的某个整数（包括1和12），然后输出相应月份的天数（2月按28天算）。
3. 编写程序，判断某一年是否是闰年。
