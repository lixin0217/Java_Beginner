第5章 不可不知的数据分类法—数据类型

本章介绍Java的基本数据类型和数据类型的转换，其中重点讲述整型、浮点类型、字符类型和布尔类型。最后对基本数据类型的默认值进行讨论。

5.1 数据类型的意义

程序，本质上就是针对数据的一种处理流程。那么，针对程序所能够处理的数据，就是程序语言的各个数据类型划分。正是有了各种数据类型，程序才可以“有的放矢”进行各种不同数据操作。在Java之中数据类型一共分为两大类：基本数据类型、引用数据类型。
在Java中规定了8种基本数据类型变量来存储整数、浮点数、字符和布尔值

一个变量就如同一个杯子或一个容器，在其内要装载某个特定的数值（如同杯子里可盛水或咖啡等）。杯子有大有小，杯子里装的水（咖啡）也有多有少。同样，不同类型的变量，其能表示的数据范围也是不同的。Java的基本数据类型占用内存位数及可表示的数据范围如下表所示。

5.2 整数类型

整数类型（Integer），简称整型，表示的是不带有小数点的数字。例如，数字10、20就表示一个整型数据。在Java中，有4种不同类型的整型，按照占据空间大小的递增次序，分别为byte（位）、short（短整型）、int（整数）及long（长整数）。在默认情况下，整数类型是指int型

5.2.1 byte类型
在Java中，byte类型占据1字节内存空间，数据的取值范围为-128 ～ 127。
【范例5-1】 byte类型数据的使用（代码bytedemo.java）。

每种基本的数据类型都有几个静态属性，如MAX_VALUE（最大值）、MIN_VALUE（最小值）、SIZE（大小）、TYPE（类型）等。要得到这些值，可用名称为该类型首字母大小对象（如byte类型对应Byte对象）通过点(.)操作符将其读取出来

5.2.2 short类型
short类型数据占据2个字节内存空间，取值范围为-32768 ～ 32767。
【范例5-2】 short类型数据的使用（代码shortdemo.java）。

5.2.3 int类型
int类型数据占据4个字节内存空间，取值范围为-2147483648 ～ 2147483647。
【范例5-3】 int类型数据的使用（intdemo.java）。

由于每一种类型毕竟都有其对应范围的最大或最小值，那么如果说在计算的过程之中，超过了此范围（大于最大值或小于最小值），那么就会产生数据的溢出问题。数据最大值、最小值会出现一个循环过程，这种情况就称为数据溢出（overflow）。

5.2.4 long类型
long类型数据占据8个字节内存空间，取值范围为-9223372036854775808 ～9223372036854775807。
【范例5-4】 long类型数据的使用（LongDemo.java）。

要想解决数据的溢出问题，那么最好的做法是扩大数据的操作范围，比int范围大的是刚刚讲到的long类型，所以可将其扩充为long，有两种方式扩充。⑴ 直接在数据前增加一个“(long)”；⑵ 直接在数据后增加一个字母“L”。

【范例5-5】 使用long类型解决int类型溢出问题（LongDemo.java）。

5.3 浮点类型
Java浮点数据类型主要有双精度double和单精度float两个类型。double类型：共8个字节，64位，第1位为符号位，中间11位表示指数，最后52位为尾数。float类型：共4个字节，32位，第1位为符号位，中间8位表示指数，最后23位表示尾数。

【范例5-6】 浮点类型的使用（floatDemo.java）。
需要注意一点，含小数的实数默认为double类型数据，如果定义的是float型数据，为其赋值的时候，必须要执行强制转型，有两种方式。
⑴ 直接加上字母“F”，或小写字母“f”
⑵ 直接在数字前加强制转型为“float”

当浮点数的表示范围不够大的时候，还有一种双精度（double）浮点数可供使用。双精度浮点数类型的长度为64个字节，有效范围为-1.7×10308～1.7×10308。
【范例5-7】 取得单精度和双精度浮点数类型的最大、最小值（doubleAndFloatDemo. java）。

5.4 字符类型（char）
字符，顾名思义，就是字母和符号的统称。字符类型在内存中占有2个字节

【范例5-8】 直接给字符类型赋值（charDemo.java）。
需要注意的是：字符要用一对单引号（' '）括起。但如果把一个字符变量赋值成一个单引号，就会出问题，这样就有了转义字符的概念。转义字符就是用不容易混淆的字符来代替那些敏感字符，它们作为一个整体使用。

【范例5-9】 转义字符的使用（EscapeChar.java）。
【范例5-10】 单个中文字符的使用（ChineseChar.java）。

值得注意的是，char和int型数据的互相转型问题。遵循C语言常用的ASCII码的习惯，字母的表示范围是：大写字母A～Z对应整数65 ～ 90、小写字母a～z对应整数97 ～ 122、字符0～9对应整型数49 ～ 57，由此可以发现，大写字母和小写字母之间的差是32个长度，如果按照此规律，就可以轻易的编写一个大小写的转换操作。

【范例5-11】 单个英文字符与ASCII(整型值)的转换（CharToInt.java）。

5.5 布尔类型（boolean）
在Java中使用关键字boolean来声明布尔类型。被声明为布尔类型的变量，只有true（真）和false（假）两种。除此之外，没有其他的值可以赋值给这个变量。布尔类型主要用于逻辑判断，就如我们日常生活中的“真”和“假”一样。

【范例5-12】 布尔值类型变量的声明（booleanDemo.java）。

5.6 数据类型的转换
Java有严格的数据类型限制，每种数据类型都有其独特的特性。这些不同的数据类型所定义的变量，它们之间的类型转换不是轻易完成的。但在特殊情况下，还是需要进行类型转换的操作，但必须遵循严格的步骤和规定。数据类型的转换方式可分为“自动类型转换”及“强制类型转换”两种。

5.6.1 自动类型转换
在程序中已定义好了数据类型的变量，若想转换用另一种数据类型表示时，Java会在下面2个条件皆成立时，自动进行数据类型的转换。
⑴ 转换前后的数据类型要相互兼容。
⑵ 转换后的数据类型的表示范围不小于转换前的类型。

【范例5-13】 声明两个变量，一个是整型，另一个是浮点型（IntAndFloat.java）。
自动数据类型转型的规律：byte short int long float double，按照范围由小到大实现自动转型操作。

5.6.2 强制类型转换
当程序需要转换数据类型时，可实施强制性的类型转换

【范例5-14】 自动转换和强制转换的使用方法（AutoConvert.java）。
当两个整数相除时，小数点以后的数字会被截断，使得运算的结果保持为整数。但由于这并不是预期的计算结果，而想要得到运算的结果为浮点数，就必须将两个整数中的一个（或是两个）强制转换为浮点数，下面的3种写法都正确。只要在变量前面加上欲转换的数据类型，运行时就会自动将此行语句里的变量做类型转换的处理，但这并不影响原先所定义的数据类型。

5.7 基本数据类型的默认值
在Java中，若在变量的声明时没有赋初值，则会给该变量赋默认值。下表列出了各种类型的默认值。
在某些情形下，Java会给予这些没有赋初始值的变量一个确切的默认值，这个值没有任何意义，但保证程序执行时，不运行有这种没有初始化值的变量存在。虽然这种方式给程序编写者带来了很多便利，但是过于依赖系统给变量赋初值，就不容易检测到是否已经给予变量应有的值了，这是个需要注意的问题。

5.8 高手点拨
1. 整型数的除法要注意
由于整数与整数运算，其结果还是整数，除法也不例外

2. C/C++语言和Java语言在布尔类型上存在显著差别
Java语言的布尔类型变量，其赋值只能是true（真）和false（假）两种。除此之外，没有其他的值可以赋值给布尔变量。也不能用1和0分别代替true（真）和false（假）。一言蔽之，Java语言中的布尔类型与整型无关。

5.9 实战练习
1. 编写程序，要求运行后要输出long类型数据的最小数和最大数。
2. 改错题：指出错误之处并对其进行修改（本题改编自2013年巨人网络的Java程序员笔试题）。
程序功能：输出int类型最小值与最大值之间的所有数是否是偶数（能被2整除的数），操作符%为求余操作。
3. 请运行下面一段程序，并分析产生输出结果的原因（改编自网络Java面试题）。
