第4章 最常用的编程元素—常量与变量

本章讲解Java中常量和变量的声明与应用、变量的命名规则以及作用范围等。

4.1 常量
一般来说，所有的程序设计语言都需要定义常量(Constant)。在Java开发语言平台中也不例外。所谓常量，就是固定不变的量，其一旦被定义并赋初值后，它的值就不能再被改变。

4.1.1 声明常量
在Java语言中，主要是利用关键字final来进行定义常量的。常量名称通常使用大写字母，例如PI、YEAR等，但这并不是硬性要求，仅是一个习惯而已，在这里建议读者养成良好的编码习惯。

常量标识符和前面讲到的变量标识符规定一样，可由任意顺序的大小写字母、数字、下划线（_）和美元符号（$）等组成，标识符不能以数字开头，亦不能是Java中的保留关键字。

此外，在定义常量时，需要注意如下两点。⑴ 必须要在常量声明时对其进行初始化，否则会出现编译错误。常量一旦初始化后，就无法再次对这个常量进行赋值。⑵ final关键字不仅可用来修饰基本数据类型的常量，还可以用来修饰后续章节讲到的“对象引用”或者方法。

【范例4-1】 声明一个常量用于成员变量（TestFinal4-1.java）。

4.2 变量
变量是利用声明的方式，将内存中的某个内存块保留下来以供程序使用，其内的值是可变的。可声明的变量数据类型有整型（int）、字符型（char）、浮点型（float或double），也可以是其他的数据类型（如用户自定义的数据类型——类）。

4.2.1 声明变量
声明变量有两个作用。
⑴ 指定在内存中分配空间大小。变量在声明时，可以同时给予初始化(即赋予初始值）。
⑵ 规定这个变量所能接受的运算。

任何一个变量在声明时必须给予它一个类型，而在相同的作用范围内，变量还必须有个独一无二的名称

【范例4-2】声明两个变量，一个是整型，另一个是字符型（TestJavaIntChar42.java）。

4.2.2 变量的命名规则
变量也是一种标识符，所以它也遵循标识符的命名规则。
⑴ 变量名可由任意顺序的大小写字母、数字、下划线（_）和美元符号（$）等组成。
⑵ 变量名不能以数字开头。
⑶ 变量名不能是Java中的保留关键字。

4.2.3 变量的作用范围
变量是有作用范围（Scope）的，作用范围有时也称作用域。一旦超出变量的作用范围，就无法再使用这个变量。
按作用范围进行划分，变量分为成员变量和局部变量。
1. 成员变量在类体中定义的变量为成员变量。它的作用范围为整个类，也就是说在这个类中都可以访问到定义的这个成员变量。

【范例4-3】 探讨成员变量的作用范围（TestMemVar4 3.java）。

2. 局部变量
在一个函数（或称方法）或函数内代码块（code block）中定义的变量称为局部变量，局部变量在函数或代码块被执行时创建，在函数或代码块结束时被销毁。局部变量在进行取值操作前必须被初始化或赋值操作，否则会出现编译错误！
Java存在块级作用域，在程序中任意大括号包装的代码块中定义的变量，它的生命仅仅存在于程序运行该代码块时。比如在for（或while）循环体里、方法或方法的参数列表里等。在循环里声明的变量只要跳出循环，这个变量便不能再使用。同样，方法或方法的参数列表里定义的局部变量，当跳出方法体（method body）之外，该变量也不能使用了。

【范例4-4】 局部变量的使用（TestLocalVar4 4.java）。
【范例4-5】 变量的综合应用（TestLocalVar4 5.java）。

一般来说，所有变量都遵循“先声明，后使用”的原则。这是因为变量只有“先声明”，它才能在内存中“存在”，之后才能被其他方法所“感知”并使用，但是存在于类中成员变量（不再任何方法内），它们的作用范围是整个类范围（classlevel），在编译器的“内部协调”下，变量只要作为类中的数据成员被声明了，就可以在类内部的任何地方使用，无需满足“先声明，后使用”的原则。

4.3 高手点拨
1. Java中作用范围是禁止嵌套的，而在C/C++中则是允许的
在Java中，在方法（函数）内定义的变量，其作用范围（包括方法的参数）是从它定义的地方开始，到它所作用范围终结的位置处结束。如在方法的开始处定义了一个变量i，那么直到该方法结束处，都不能再定义另一个同名变量i。

2. Java中类与方法中变量作用域可以嵌套
在Java中，类与方法之间作用域是可以嵌套的，可以把整个类看做一个大的作用域，它定义的字段(或称数据成员)可被方法中的同名字段所屏蔽，其行为类似于上表左侧所示的C/C++的作用域嵌套。

4.4 实战练习
1. 编写一个程序，定义局部变量sum，并求出1+2+3+…+99+100之和，赋值给sum，并输出sum的值。
2. 纠正下面代码的错误，并给出正确的输出结果。
3. 动手试一试，下面的代码中在编译时哪一行会出错？（Java面试题）


