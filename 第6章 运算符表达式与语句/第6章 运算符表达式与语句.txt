第6章 运算符表达式与语句

运算符、表达式和语句是编程的主要部件，能够使系统程序直接对内存进行操作，从而大大提高程序的执行能力。本章介绍Java运算符的用法、表达式与运算符之间的关系，以及表达式里各种变量的数据类型的转换等。

6.1 运算符
程序是由许多语句（statement）组成的，而语句组成的基本单位就是表达式与运算符。Java的运算符可分为4类：算术运算符、关系运算符、逻辑运算符和位运算符。
Java中的语句有多种形式，表达式就是其中的一种形式。表达式是由操作数与运算符所组成的。操作数可以是常量、变量，也可以是方法，而运算符就是数学中的运算符号，如“+”、“-”、“*”、“/”、“%”等。

6.1.1 赋值运算符
若为各种不同类型的变量赋值，就需要用到赋值运算符（AssignmentOperator）。简单的赋值运算符由等号（=）实现，只是把等号右边的值赋予等号左边的变量。

【范例6-1】 在程序中用“=”赋值（AssignmentOperator6 1.java）。

6.1.2 一元运算符
对于很多表达式而言，运算符前后都会有操作数。但有一类操作符比较特别，它只需要一个操作数。这类运算符称为一元运算符（或单目运算符，UnaryOperator）。下表列出了一元运算符的成员。

【范例6-2】 一元运算符的使用（UnaryOperator6 2.java）。

6.1.3 算术运算符
算术运算符（Arithmetic Operator）用于量之间的运算。

1.加法运算符“+”
将加法运算符“+”的前后两个操作数相加

2.减法运算符“-”
将减法运算符“-”前面的操作数减去后面的操作数

3. 乘法运算符“*”
将乘法运算符“*”的前后两个操作数相乘

4. 除法运算符“/”
将除法运算符“/”前面的操作数除以后面的操作数

使用除法运算符时，要特别注意数据类型的问题。若被除数和除数都是整型,且被除数不能被除数整除时，这时输出的结果为整数（即整型数/整型数=整型数）。这是因为整型变量无法保存小数点后面的数据所致，因此在声明数据类型及输出时要特别小心。

【范例6-3】 除法运算符的使用（DivisionOperator6 3.java）。

5. 取余运算符“%”
将取余运算符“%”前面的操作数除以后面的操作数，取其得到的余数。

【范例6-4】 取余数（也称取模）操作（ModuloOperation6 4.java）。
需要初学者注意的是，Java中的取余操作数也可以是负数和浮点数，而在C/C++中，取余运算的操作数只能是整数。

6.1.4 逻辑运算符
逻辑运算符只对布尔型操作数进行运算并返回一个布尔型数据。也就是说，逻辑运算符的操作数和运行结果只能是真（true）或者假（false）。常见的逻辑运算符有3个，即与（&&）、或（||）、非（！）

在逻辑运算中，“&&”和“||”属于所谓的短路逻辑运算符 （Short-CircuitLogical Operators）。对于逻辑运算符“&&”，要求左右两个表达式都为true时才返回true，如果左边第一个表达式为false时，它立刻就返回false，就好像短路了一样立刻返回，省去了一些不必要的计算开销。
类似的，对于逻辑运算符“||”，要求左右两个表达式有一个为true时就返回true，如果左边第一个表达式为true时，它立刻就返回true。

【范例6-5】 短路逻辑运算符的使用（ShortCircuitLogical6 5.java）。
有的时候，我们需要逻辑“与”操作和“或”操作的两个操作数均需要运算，这时我们就需要使用避免短路的逻辑运算符——“&”和“|”，它们分别是可短路的逻辑运算符（&&和||）一半的字符。

【范例6-6】 短路逻辑运算符(”&”和 “|”)和非短路逻辑运算符(“&&”和“||”)对比。

6.1.5 位运算符
位操作是指对操作数以二进制位（bit）为单位进行的运算。其运算的结果为整数。位操作的第一步是把操作数转换为二进制的形式，然后按位进行布尔运算，运算的结果也为二进制数。位操作运算符（bitwise operators ）有7个，

【范例6-7】 “按位与”和“按位或”操作（BitwiseOperator6 7.java）。

6.1.6 三元运算符
三元（Ternary）运算符也称三目运算符，它的运算符是“?:”，有三个操作数。操作流程如下：首先判断条件，如果条件满足，就会赋予一个变量一个指定的内容（冒号：之前的），不满足会赋予变量另外的一个内容（冒号之后的）

【范例6-8】 三元运算符的使用（TernaryOperator6 8.java）。

6.1.7 关系运算符
与if语句if语句通常用于某个条件进行真（true）、假（false）识别。
如果括号中的判断条件成立，就会执行后面的语句；若是判断条件不成立，则后面的语句就不会被执行。

在Java中，关系运算符的表示方式和在数学中类似，但是由于赋值运算符为“=”，为了避免混淆，当使用关系运算符“等于”时，就必须用2个等号（==）表示；而关系运算符“不等于”的形式有些特别，用“！=”代表，这是因为想要从键盘上取得数学上的不等于符号“≠”较为困难，同时“！ ”有"非"的意思，所以就用“！=”表示不等于。

当使用关系运算符（Relational Operator）去判断一个表达式的成立与否时，若是判断式成立则会产生一个响应值true，若是判断式不成立，则会产生响应值false。

【范例6-9】 关系运算符的使用（RelationOperator6 9.java）。

6.1.8 递增与递减运算符
递增与递减运算符在C / C++中就已经存在了，Java中将它们保留了下来，这是因为它们具有相当大的便利性。

【范例6-10】 “++”运算符的两种使用方法（IncrementOperator6 10.java）。

6.1.9 括号运算符
括号运算符（）是用来处理表达式的优先级的。

6.1.10 运算符的优先级
下表列出了各个运算符的优先级的排列，数字越小的表示优先级越高（优先级排名靠前）。
结合性就是可以让程序设计者了解到运算符与操作数之间的关系及其相对位置。举例来说，当使用同一优先级的运算符时，结合性就非常重要了，它决定谁会先被处理。

算术运算符的结合性为“由左至右”，就是在相同优先级的运算符中，先由运算符左边的操作数开始处理，再处理右边的操作数。

6.2 表达式
表达式是由常量、变量或是其他操作数与运算符所组合而成的语句。如下面的例子，均是表达式正确的使用方法。
Java还有一些相当简洁的写法，是将算术运算符和赋值运算符结合成为新的运算符。

【范例6-11】 程序的简洁写法（代码SimpleWriting6 11.java）。
【范例6-12】 程序的简洁写法2（SimpleWriting6 11 2.java）。
优秀程序设计里有个著名的KISS（Keep It Simple and Stupid ）原则，即让代码保持简单,这里Stupid不是愚蠢的意思，而是表示一目了然。一目了然的代码易于理解和维护。由于上述简洁表达式的使用方法不易理解，所以目前已不提倡使用了。

6.2.1 算术表达式
算术表达式用于数值计算。它是由算术运算符和变量或常量组成，其结果是一个数值。
【范例6-13】 简单的算术表达式的使用（ArithmeticExpression6 13.java）。

6.2.2 关系表达式
关系表达式常用于程序判断语句中，由关系运算符组成，其运算结果为逻辑型。
【范例6-14】 简单的关系表达式的使用（RelationExpression6 14.java）。

6.2.3 逻辑表达式
用逻辑运算符将关系表达式或逻辑量连接起来的有意义的式子称为逻辑表达式。
逻辑表达式的值也是一个逻辑值，即“true”或“false”。
【范例6-15】 简单的逻辑表达式的使用（LogicExpression6 15.java）。

6.2.4 赋值表达式
赋值表达式由赋值运算符和操作数组成，赋值运算符用于给变量赋值。
【范例6-16】 简单的赋值表达式的使用（AssignExpress6 16.java）。
赋值表达式的功能是先计算右侧表达式的值，再赋予左边的变量。赋值运算符具有右结合性。

6.2.5 表达式的类型转换
Java是一个很有弹性的程序设计语言，当上述情况发生时，只要坚持“以不流失数据为前提”的大原则，即可进行不同的类型转换，使不同类型的数据、表达式都能继续存储。依照大原则，当Java发现程序的表达式中有类型不相符的情况时，就会依据下列规则来处理类型的转换。
⑴ 占用字节较少的数据类型转换成占用字节较多的数据类型。
⑵ 字符类型会转换成int类型。
⑶ int类型会转换成float类型。
⑷ 表达式中若某个操作数的类型为double，则另一个操作数也会转换成double类型。
⑸ 布尔类型不能转换成其他类型。

⑴和⑵体现“大鱼（占字节多的）吃小鱼（占字节少的）”思想。
⑶和⑷体现“精度高者优先”思想，占据相同字节的类型向浮点数（float、double）靠拢。
⑸中体现了Java对逻辑类型坚决“另起炉灶”的原则，布尔类型变量的值只能是true或false，它们和整型数据无关。
而在C/C++中，逻辑类型和整型变量的之间关系是“剪不断，理还乱”，即所有的非零整数都可看作为逻辑“真”，只有0才看做为“假”。
【范例6-17】 表达式类型的自动转换（TypeConvert6 17.java）。

6.3 语句
在学会使用运算符和表达式后，就可以写出最基本的Java程序语句了。表达式由运算符和操作数组成，语句（statement）则由表达式组成。
计算机执行程序就是由若干条语句进行的。每个语句后用分号（;）隔开。多个语句只要用分号隔开，可以处于同一行,但为了让程序有良好的可读性，并且方便添加注释，我们推荐读者遵循一条语句占据一行的模式.

6.3.1 语句中的空格
在Java程序语句中，空格是必不可少的。一方面，所有的语言指令都需要借助空格来分割标注。另一方面，虽然Java编译器在编译的过程中，会把所有非必需的空格过滤掉，但空格可以使程序更具有可读性，更加美观。

【范例6-18】 语句中的空格使程序易懂（SpaceDemo6 18.java）。
笔者推荐，在所有可分离的操作符中间都加上一个空格，这样让代码更加舒展,每个操作符（如这个语句的加号“=”和“+”）左右两边都手工多敲一个空格.但是对于逻辑判断的等号“==”、“&&”、“||”、简写操作符“+=”、“-=”等、左右移符号“<<”、“>>”及“>>>”等，是不可以用空格隔开的。如果这些符号中间添加空格的话，编译器就会不“认识”它们，从而无法编译通过。

6.3.2 空语句
Java中有一种语句什么也不执行，这就是空语句。空语句是由一个分号（；）组成的语句。空语句是什么也不执行的语句。在程序中空语句常常用来作空循环体。
空语句还可以用于在调试时留空以待以后添加新的功能。如果不是出于这种目的，一般不建议使用空语句，因为空语句不完成任何功能，但同样会额外占用计算机资源。
由于多个Java语句可以处于同一行，那么int x ;;就可以解读为“int x;”这条语句和另外一个空语句“;”共处于一行之上。int x语句后面即使跟10个分号也合法。

6.3.3 声明语句
使用声明语句可以在每一条语句中声明一个变量，也可以在一条语句中声明多个变量。还可以在声明变量的同时，直接与赋值语句连用为变量赋值。

如果对声明的成员变量没有赋值，那么将赋为默认的值。默认初始值：整型的为0；布尔类型变量默认值为false；引用数据类型和字符串类型默认都为null。

6.3.4 赋值语句
除了可以在声明语句中为变量赋初值外，还可以在程序中为变量重新赋值，这就用到了赋值语句。
在程序代码中，使用赋值语句给变量赋值，赋值符号右边可以是一个常量或变量，也可以是一个表达式。程序在运行时先计算表达式的值，然后将结果赋给等号左边的变量。

6.4 高手点拨
1. &和&&、|和||的关系是怎么样？（Java面试题）
答：对于“与操作”：有一个条件不满足，结果就是false。普通与（&）：所有的判断条件都要执行；短路与（&&）：如果前面有条件已经返回了false，不再向后判断，那么最终结果就是false。
对于“或操作”：有一个条件满足，结果就是true。对于普通或（|）：所有的判断条件都要执行；短路或（||）：如果前面有条件返回了true，不再向后判断，那么最终结果就是true。

2. 递增与递减运算符
递增与递减运算符通常单独使用，不与其他操作符一起组成语句。

3. 位运算的技巧
任何数与 0000 0001（二进制） 进行或（|）运算后，第一位将变为1，与 11111110（二进制）进行与（&）运算后，第一位将变为0。位运算通常用于设置或获取标志位，及判断相应的操作是否成功。

6.5 实战练习
1. 编写程序，计算表达式“（（12345679*9）>（97654321*3））? true :false”的值。

2. 编写程序，实现生成一随机字母（a-z，A-Z），并输出，运行结果如下图所示。

拓展知识。
⑴ Math.random()返回随机 double 值，该值大于等于 0.0 且小于 1.0。
例如: double rand = Math.random(); // rand 储存着[0,1) 之间的一个小数
⑵ 大写字母A～Z对应整数65 ～ 90、小写字母a～z对应整数97 ～ 122。

3. 编写程序，实现产生（或输入）一随机字母（a-z，A-Z），转为大写形式，并输出。
请分别使用三元运算和位运算实现，运行结果如下图所示。

拓展知识点。
⑴ 大写字母A～Z对应整数65 ～ 90、小写字母a～z对应整数97 ～ 122。
⑵ 可以使用 0x 表示16进制数，如0x10 表示16进制的 10。
