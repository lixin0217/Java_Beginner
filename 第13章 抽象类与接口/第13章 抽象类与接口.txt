第13章 抽象类与接口

Java可以创建一种类专门用来当做父类，这种类称为“抽象类”。抽象类的作用有点类似“模板”，其目的是要设计者依据它的格式来修改并创建新的类。本章讲述抽象类的基本概念以及具有多继承特性的接口。

13.1 抽象类
在Java中可以创建一种类专门用来做父类，这种类称为“抽象类”。抽象类实际上也是一个类，只是与之前的普通类相比，内部新增了抽象方法。

13.1.1 抽象类的基本概念
抽象方法是只声明而未实现的方法，所有的抽象方法必须使用abstract关键字声明，包含抽象方法的类也必须使用abstractclass声明。

抽象类定义规则如下：
⑴ 抽象类和抽象方法都必须用abstract关键字来修饰；
⑵ 抽象类不能直接实例化，也就是不能直接用new关键字去产生对象；
⑶ 抽象类定义时抽象方法只需声明，而不需实现；
⑷ 含有抽象方法的类必须被声明为抽象类，抽象类的子类必须覆写所有的抽象方法后才能被实例化，否则这个子类还是个抽象类。

抽象类的定义就是比普通类多了一些抽象方法的定义而已。虽然定义了抽象类，但是抽象类却不能直接使用。
如果说一个类的对象可以被实例化，那么就表示这个对象可以调用类中的属性或者是方法，但是抽象类中存在抽象方法，而抽象方法没有方法体，没有方法体的方法无法使用。

对于抽象类的使用原则如下。抽象类必须有子类，子类使用extends继承抽象类，一个子类只能够继承一个抽象类；子类（如果不是抽象类）则必须覆写抽象类之中的全部抽象方法；如果要想实例化抽象类的对象，则可以使用子类进行对象的向上转型来完成。

【范例13-1】 抽象类的用法（代码AbstractClassDemo.java）。
【范例13-2】 抽象类中构造方法的定义使用（代码AbstractConstructor. java）。
【范例13-3】 验证static定义的内部抽象类（代码StaticInnerAbstractClass. java）。

抽象类的特征。
⑴ 抽象类中可以有构造方法。抽象类也可以像普通类一样，有构造方法、一般方法和属性，更重要的是还可以有一些抽象方法，需要子类去实现，而且在抽象类中声明构造方法后，在子类中必须明确调用。
⑵ 抽象类不能够使用final定义。使用final定义的类不能有子类，而抽象类使用的时候必须有子类，这是一个矛盾的问题，所以抽象类上不能出现final定义。
⑶ 在外部抽象类上无法使用static声明，但是内部抽象类却可以使用static定义，使用static定义的内部抽象类就表示一个外部类。
⑷ 抽象类之中可以没有抽象方法，但即便没有抽象方法的抽象类也不能够直接在外部通过关键字new实例化。

13.1.2 抽象类应用——模板设计模式
在使用抽象类时，可以将部分逻辑以具体方法和具体构造函数的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现，这就是模板方法模式。

【范例13-4】 模板设计模式（代码TemplateMethod.java）。

13.2 接口
接口（interface）是Java所提供的另一种重要技术，是一种特殊的类，它的结构和抽象类非常相似，也具有数据成员与抽象方法，但它与抽象类又有不同，并且Java 8中又添加了新特性。
